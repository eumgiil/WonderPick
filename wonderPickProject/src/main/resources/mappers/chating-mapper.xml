<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chatingMapper">
	<resultMap type="chating" id="chatingResultSet">
 		<result column="ROOM_NAME" property="roomName"/>
 		<result column="BOARD_NO" property="boardNo"/>
 		<result column="ARTIST_NO" property="artistNo"/>
 		<result column="MEMBER_NO" property="memberNo"/>
 	</resultMap>
 	
 	<resultMap type="beforeReadChatings" id="brcResultSet">
 		<result column="BOARD_NO" property="boardNo"/>
 		<result column="FROM_MEMBER" property="fromMember"/>
 		<result column="TO_MEMBER" property="toMember"/>
 		<result column="CONTENT" property="content"/>
 		<result column="ENROLL_DATE" property="enrollDate"/>
 		<result column="READ_CHECK" property="readCheck"/>
 	</resultMap>
 	
 	<resultMap type="apar" id="aparResultSet">
 		<result column="OPTION_NO" property="optionNo"/>
 		<result column="BOARD_NO" property="boardNo"/>
 		<result column="ADD_PRICES" property="addPrices"/>
 		<result column="REQUEST" property="request"/>
    	<result column="TOTAL_PRICE" property="totalPrice"/>
    	<result column="ORDER_CONTENT" property="orderContent"/>
    	<result column="PRICE" property="price"/>
    	<result column="FILE_PATH" property="filePath"/>
    	<result column="COUNT" property="count"/>
 	</resultMap>
 	
 	<resultMap id="memberResultSet" type="member">
		<result column="member_no" property="memberNo" />
		<result column="member_grade" property="memberGrade" />
		<result column="member_id" property="memberId" />
		<result column="member_pwd" property="memberPwd" />
		<result column="member_name" property="memberName" />
		<result column="NICKNAME" property="nickName" />
		<result column="phone" property="phone" />
		<result column="email" property="email" />
		<result column="address" property="address" />
		<result column="pay_account" property="payAccount" />
		<result column="email_agree" property="emailAgree" />
		<result column="status" property="status" />
		<result column="enroll_date" property="enrollDate" />
		<result column="modify_date" property="modifyDate" />
	</resultMap>
	
	<resultMap type="ac" id="acResultSet">
 		<result column="BOARD_NO" property="boardNo"/>
 		<result column="ROOM_NAME" property="roomName"/>
 		<result column="MEMBER_CHECK" property="memberCheck"/>
 		<result column="ARTIST_CHECK" property="artistCheck"/>
 	</resultMap>
	
 	<select id="selectartistNick" parameterType="_int" resultMap="memberResultSet">
 		select
 			nickname,member_no
		from
			member
		where
			member_no = (select member_no
                    	 from board
                    	 where board_no = #{boardNo})
 	</select>
 	
 	<select id="selectMemberNo" parameterType="_int" resultType="string">
 		select
 			nickname
 		from
 			member
 		where
 			member_no = #{memberNo}
 		
 	</select>
 	
	<insert id="createRoom" parameterType="chating">
		INSERT
		INTO
		CHATING
		(
		ROOM_NAME,
		BOARD_NO,
		ARTIST_NO,
		MEMBER_NO
		)
		 VALUES
		(
		#{roomName},
		#{boardNo},
		#{artistNo},
		#{memberNo}
		)
	</insert>
	
	<select id="selectAllRoom" resultMap="chatingResultSet" parameterType="chating">
		select
			*
		from
			chating
		where 
			ROOM_NAME LIKE #{membertNickName}
	</select>
	
	<select id="selectRoomName" resultMap="chatingResultSet" parameterType="chating">
		select
			*
		from
			chating
		where 
			ROOM_NAME LIKE #{membertNickName}
		and
			ROOM_NAME LIKE #{artistNickName}
	</select>
	
	<select id="checkRoomExisted" resultMap="chatingResultSet" parameterType="chating">
		
		select 
			ROOM_NAME
		from 
			chating
		where
		    (ARTIST_NO =  #{memberNo} and MEMBER_NO =  #{artistNo})
		or
		    (ARTIST_NO =  #{artistNo} and MEMBER_NO =  #{memberNo})
	</select>
	
	<insert id="insertreadYetChatings">
		insert
		into
			BEFORE_READ_CHATINGS
			(
			CHATTING_NO,
			BOARD_NO,
			ROOM_NAME,
			FROM_MEMBER,
			TO_MEMBER,
			CONTENT,
			ENROLL_DATE,
			READ_CHECK
			)
		values
			(
			SEQ_CHATIN_NO.NEXTVAL,
			#{boardNo},
			#{roomName},
			#{fromMember},
			#{toMember},
			#{content},
			#{enrollDate},
			#{readCheck}
			)
	</insert>
	
	<select id="selectreadYetChatings" parameterType="chating" resultMap="brcResultSet">
		select
			content,
			READ_CHECK,
			FROM_MEMBER,
			TO_MEMBER
		from
			BEFORE_READ_CHATINGS
		where
			ROOM_NAME=#{roomName}
		and 
			BOARD_NO=#{boardNo} 
		order
		by
			ENROLL_DATE ASC
	</select>
	
	<update id="countReadYetChatings" parameterType="chating">
		update
			BEFORE_READ_CHATINGS
		set
			READ_CHECK = #{membertNickName}
		where
			ROOM_NAME = #{roomName}
		and
			BOARD_NO = #{boardNo}
	</update>
	
	<delete id="removeReadChat" parameterType="chating">
		delete
		from
			BEFORE_READ_CHATINGS
		where
			ROOM_NAME = #{roomName}
		and
			BOARD_NO = #{boardNo}
			
	</delete>
	
	<update id="insertReasonPrice" parameterType="apar">
		<foreach collection="list" item="apar" open="INSERT ALL" close="SELECT * FROM DUAL" separator=" ">
			INTO
			ADD_PRICE_AND_REASON
			(
			OPTION_NO,
			BOARD_NO,
			ROOM_NAME,
			ADD_PRICES,
			REQUEST
			)
			 VALUES
			(
			FUN_SEQ_ADDOPTION,
			#{apar.boardNo},
			#{apar.roomName},
			#{apar.addPrices},
			#{apar.request}
			)
		</foreach>
	</update>
	
	<select id="selectCondition" parameterType="chating" resultMap="aparResultSet">
		select
		    OPTION_NO,
		    BOARD_NO,
		    ADD_PRICES,
		    REQUEST, 
		    total_price,
		    order_content,price,
		    file_path,
		    COUNT
		from
		    add_price_and_reason
		right outer join 
		    (
		        select
		            order_content,
		            sum(add_prices)+price total_price,
		            board_no,price,
		            file_path,
		            COUNT
		        from
		            (
		                select
		                    order_content,price,board_no,file_path,COUNT
		                from
		                    order_history
		                join board_image using(board_no)
		                where
		                    board_no=#{boardNo}
		                and
		                    file_level = 1
		            )
		        left outer join add_price_and_reason using(board_no)
		        group by order_content,price,board_no,price,room_name,file_path,COUNT
		        having room_name = #{roomName}
		    ) 
		using(board_no)
		where 
		    board_no = #{boardNo}
		order by option_no
	</select>
	
	<delete id="deletePriceAndReason" parameterType="_int">
		delete
		from
			ADD_PRICE_AND_REASON
		where
			OPTION_NO = #{i}
	</delete>
	
	<insert id="insertAcceptCondition" parameterType="apar">
		insert
		into
			ACCEPT_CONDITION
			(
				BOARD_NO,
				ROOM_NAME
			)
		values
			(
				#{boardNo},
				#{roomName}
			)
	</insert>
	<update id="updatetAcceptCondition" parameterType="chating">
		update
			ACCEPT_CONDITION
		set
			<choose>
					<when test="artistNo!=0">
						ARTIST_CHECK='Y'
					</when>
					<otherwise>
						MEMBER_CHECK='Y'
					</otherwise>
				</choose>
		where
			BOARD_NO = #{boardNo}
		and
			ROOM_NAME = #{roomName}
	</update>
	<select id="selectAcceptStatus" parameterType="chating" resultMap="acResultSet">
		select 
			BOARD_NO,
			ROOM_NAME,
			MEMBER_CHECK,
			ARTIST_CHECK
		from
			ACCEPT_CONDITION
		where
			BOARD_NO = #{boardNo}
		and
			ROOM_NAME = #{roomName}
	</select>
	
	<delete id="deleteAcceptCondition" parameterType="chating">
		delete
		from
			ACCEPT_CONDITION
		where
			BOARD_NO = #{boardNo}
		and
			ROOM_NAME = #{roomName}
	</delete>
</mapper>